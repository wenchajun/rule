/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package app

import (
	"fmt"
	"rule/pkg/config"
	"rule/pkg/exporter"
	"rule/pkg/rule"
	"rule/pkg/utils"

	"github.com/golang/glog"
	"github.com/kubesphere/event-rule-engine/visitor"
)

func auditMatch(a *rule.Auditing) {

	res := matchAuditingRule(a)
	if !res {
		return
	}

	if res && len(a.Message) > 0 {
		go exporter.Export(a)
	}

	if !a.IsAlertOnly() {
		fmt.Println(a.ToString())
	}
}

func eventMatch(e *rule.Event) {
	res := matcEventRule(e)
	if !res {
		return
	}

	if res && len(e.) > 0 {
		go exporter.Export(e)
	}

	if !e.IsAlertOnly() {
		fmt.Println(e.ToString())
	}
}

func matchAuditingRule(a *rule.Auditing) bool {

	m, err := utils.StructToMap(a.Event)
	if err != nil {
		return false
	}

	fm := utils.Flatten(m)
	rs := config.GetConfig().Rules
	archiving := false
	priority := ""
	for _, r := range rs {
		if !r.Enable || r.Kind != rule.KindRule || r.Type !=rule.AuditingType  {
			continue
		}

		if !r.IsAlerting() && !r.IsArchiving() {
			continue
		}

		// If the event matched an archiving rule, then skip other archiving rule.
		if archiving && !r.IsAlerting() {
			continue
		}

		if archiving && !r.PriorityGreater(priority) {
			continue
		}

		c, _ := r.GetCondition(rs)
		err, ok := visitor.EventRuleEvaluate(fm, c)
		if err != nil {
			glog.Errorf("match rule[%s] error %s", r.Name, err)
			continue
		}

		if ok {
			// When the event matched multiple rules, the message is generated by the rule with the highest priority
			if r.IsAlerting() {
				a.Message = r.GetMessage(a, fm, rs)
				a.SetAlertRuleName(r.Name)
				priority = r.Priority
			}

			archiving = true
		}
	}

	return archiving
}

